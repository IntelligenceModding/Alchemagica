buildscript {
    repositories {
        maven {
            name = "Intelligence Minecraft"
            url = "https://mvn.intelligence-modding.de/Minecraft"
        }
        mavenCentral()
        gradlePluginPortal()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '6.0+', changing: true
        classpath 'org.parchmentmc:librarian:1.+'
    }
}

plugins {
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'org.parchmentmc.librarian.forgegradle'

group = 'de.artemis.alchemagica'
version = "${mc_version}-${mod_version}"

java {
    archivesBaseName = 'alchemagica'
    toolchain.languageVersion = JavaLanguageVersion.of(17)
}

minecraft {
    mappings channel: "${mappings_channel}", version: "${mappings_version}"

    runs {
        client {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alchemagica'

            args "--username", "ArtemisYouTube"
            args "--uuid", "6611b78f-7fbb-4f41-801a-4e85fd0dca3c"

            mods {
                alchemagica {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alchemagica'

            mods {
                alchemagica {
                    source sourceSets.main
                }
            }
        }

        gameTestServer {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'
            property 'forge.enabledGameTestNamespaces', 'alchemagica'

            mods {
                alchemagica {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run')
            property 'forge.logging.markers', 'REGISTRIES'
            property 'forge.logging.console.level', 'debug'

            args '--mod', 'alchemagica', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                alchemagica {
                    source sourceSets.main
                }
            }
        }
    }
}

sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
    flatDir {
        dir 'libs'
    }

    maven {
        name = "Intelligence repository"
        url = "https://mvn.intelligence-modding.de/Intelligence"
    }
    maven {
        name = "Intelligence Minecraft repository"
        url = "https://mvn.intelligence-modding.de/Minecraft"
    }

    maven { // JEI
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

dependencies {
    minecraft "net.minecraftforge:forge:${mc_version}-${forge_version}"
    // JEI
    compileOnly(fg.deobf("mezz.jei:jei-${mc_version}-common-api:${jei_version}"))
    compileOnly fg.deobf("mezz.jei:jei-${mc_version}-forge-api:${jei_version}")
    runtimeOnly fg.deobf("mezz.jei:jei-${mc_version}-forge:${jei_version}")

}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                "Specification-Title"     : "alchemagica",
                "Specification-Vendor"    : "Artemis",
                "Specification-Version"   : "${mod_version}",
                "Implementation-Title"    : project.name,
                "Implementation-Version"  : project.jar.archiveVersion,
                "Implementation-Vendor"   : "Artemis",
                "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

jar.finalizedBy('reobfJar')

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8'
}
